import numpy as np
import matplotlib.pyplot as plt

# Параметры моделирования
N = 3  # Длина окна скользящего среднего
L = 1000  # Количество повторений эксперимента
sigma_X = 1  # Стандартное отклонение

# Функция для моделирования MA-алгоритма
def simulate_ma_algorithm(N, h, L, mX_normal, mX_fault, sigma_X):
    delay_times = []
    false_alarm_count = 0

    for _ in range(L):
        # Генерация начального стека (нормальный режим)
        stack = np.random.normal(mX_normal, sigma_X, N)
        g = np.mean(stack)

        # Исключение ложной тревоги в начальной фазе
        while g >= h:
            stack = np.random.normal(mX_normal, sigma_X, N)
            g = np.mean(stack)

        # Основная фаза моделирования
        time_step = 0
        while True:
            time_step += 1

            # Генерация нового значения
            x_new = np.random.normal(mX_normal, sigma_X) if np.random.rand() < 0.5 else np.random.normal(mX_fault, sigma_X)
            
            # Обновление стека и вычисление решающей функции
            stack = np.roll(stack, -1)
            stack[-1] = x_new
            g = np.mean(stack)

            # Проверка на разладку
            if g >= h:
                if x_new < mX_fault:
                    false_alarm_count += 1
                else:
                    delay_times.append(time_step)
                break

    # Результаты моделирования
    false_alarm_rate = false_alarm_count / L
    average_delay = np.mean(delay_times) if delay_times else None
    return false_alarm_rate, average_delay

# Исследование времени запаздывания и ложных тревог
def analyze_algorithm(delta_values, T_lag_targets, N, L, sigma_X):
    results = []

    for delta in delta_values:
        for T_lag_target in T_lag_targets:
            h = 2.326  # Начальный порог (можно адаптировать для точности)
            mX_normal = 0
            mX_fault = delta * sigma_X

            false_alarm_rate, average_delay = simulate_ma_algorithm(N, h, L, mX_normal, mX_fault, sigma_X)

            results.append({
                'delta': delta,
                'T_lag_target': T_lag_target,
                'false_alarm_rate': false_alarm_rate,
                'average_delay': average_delay
            })

    return results

# Визуализация результатов исследования
def visualize_results(results):
    for T_lag_target in set(r['T_lag_target'] for r in results):
        deltas = [r['delta'] for r in results if r['T_lag_target'] == T_lag_target]
        delays = [r['average_delay'] for r in results if r['T_lag_target'] == T_lag_target]

        plt.plot(deltas, delays, label=f'T_lag_target = {T_lag_target}')

    plt.title('Зависимость времени запаздывания от величины разладки')
    plt.xlabel('Величина разладки (delta)')
    plt.ylabel('Среднее время запаздывания')
    plt.legend()
    plt.grid()
    plt.show()

# Параметры исследования
delta_values = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0]  # Величины разладки
T_lag_targets = [100, 250, 500, 1000]  # Целевые времена ложных тревог

# Запуск исследования
results = analyze_algorithm(delta_values, T_lag_targets, N, L, sigma_X)
visualize_results(results)
